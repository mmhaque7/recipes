---
import { getCollection, getEntry, type CollectionEntry } from "astro:content";

type RecipeData = CollectionEntry<"recipes">["data"];

export async function getStaticPaths() {
  const recipes = await getCollection(
    "recipes",
    ({ data }: { data: RecipeData }) => data.published !== false
  );
  return recipes.map((r) => ({ params: { slug: r.slug } }));
}

const { slug } = Astro.params!;
const entry = await getEntry("recipes", slug!);
if (!entry) return Astro.redirect("/404");

const { Content } = await entry.render();
const data: RecipeData = entry.data;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{data.title}</title>
    <meta name="description" content={data.description ?? ""} />
  </head>
  <body>
    {data.heroImage && <img src={data.heroImage} alt={data.title} />}
    <h1>{data.title}</h1>
    {data.description && <p>{data.description}</p>}
    <p><strong>Servings:</strong> {data.servings ?? "â€”"}</p>
    <p>
      <strong>Time:</strong>
      {(data.prepTimeMins ?? 0) + (data.cookTimeMins ?? 0)} mins
    </p>
    <h2>Ingredients</h2>
    <ul>
      {data.ingredients?.map((i: string) => <li>{i}</li>)}
    </ul>
    <h2>Steps</h2>
    <ol>
      {data.steps?.map((s: string) => <li>{s}</li>)}
    </ol>
    <article>
      <Content />
    </article>
  </body>
</html>
